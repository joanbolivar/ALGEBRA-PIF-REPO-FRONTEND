^\d{3}$;123;Esta regex busca una cadena que contenga exactamente tres dígitos numéricos.^indica el inicio,\d{3}tres dígitos, y$el final de la cadena.
^[a-zA-Z]+$;HolaMundo;Esta expresión busca una o más (+) letras mayúsculas o minúsculas de la 'a' a la 'z' ([a-zA-Z]) desde el inicio (^) hasta el final ($) de la cadena.
\b[A-Z][a-z]+\b;Manzana;Busca una palabra (\bindica límite de palabra) que comience con una letra mayúscula ([A-Z]) seguida de una o más letras minúsculas ([a-z]+).
\d{2}-\d{2}-\d{4};25-12-2023;Coincide con un formato de fecha DD-MM-YYYY, donde\d{2}son dos dígitos y\d{4}son cuatro dígitos, separados por guiones literales (-).
^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$;usuario@ejemplo.com;Valida una dirección de correo electrónico estándar. Comprueba el formato 'nombredeusuario@dominio.extension', donde la extensión ([a-zA-Z]{2,}) debe tener al menos dos letras. Anclada de principio (^) a fin ($).
(gato|perro|pez);perro;Esta expresión busca la palabra exacta 'gato', 'perro' o 'pez'. El pipe (|) actúa como un OR, permitiendo cualquiera de las alternativas especificadas.
^#?([a-f0-9]{6}|[a-f0-9]{3})$;#FF0000;Valida un código de color hexadecimal. Puede empezar con '#' opcionalmente (?), seguido de 6 ([a-f0-9]{6}) o 3 ([a-f0-9]{3}) caracteres hexadecimales (letras 'a'-'f', dígitos '0'-'9'). Anclada de principio (^) a fin ($).
\(\d{3}\) \d{3}-\d{4};(123) 456-7890;Busca un número de teléfono en el formato (XXX) XXX-XXXX. Los paréntesis`(y)deben escaparse para que coincidan literalmente, y\d{3}y\d{4}buscan tres y cuatro dígitos respectivamente.
^\w+$;usuario_123;Busca una cadena que consista en uno o más (+) caracteres de palabra (\w: letras, números o guion bajo) de principio (^) a fin ($).`
^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)$;http://www.ejemplo.com/ruta?q=1;Valida una URL completa, comenzando con http o https (s?), permitiendo www. opcional ((www\.)?), un nombre de dominio y una ruta/query opcional. Anclada de principio (^) a fin ($).`
^\d+(\.\d{1,2})?$;123.45;Busca un número entero (\d+) opcionalmente seguido por un punto literal (\.) y uno o dos decimales (\d{1,2}). El grupo decimal ((\.\d{1,2})) es opcional (?). Anclado de principio (^) a fin ($).`
^(?:[01]\d|2[0-3]):[0-5]\d$;14:30;Valida un formato de hora HH:MM (24h). El grupo (?:[01]\d|2[0-3]) representa las horas de 00 a 23, y [0-5]\d los minutos de 00 a 59. Anclado de principio (^) a fin ($).`
.*\.(txt|csv)$;documento.txt;Busca cualquier cadena (.*) que termine ($) con un punto literal (\.) seguido de la extensión 'txt' o 'csv' ((txt|csv)).`
^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{8,}$;Abcdef12;Valida una contraseña que debe tener al menos 8 caracteres alfanuméricos ([a-zA-Z\d]{8,}), y utilizando lookaheads ((?=...)), debe contener al menos una minúscula (.*[a-z]), una mayúscula (.*[A-Z]) y un dígito (.*\d). Anclada de principio (^) a fin ($).`
^(true|false|yes|no)$;true;Valida que la cadena sea exactamente 'true', 'false', 'yes' o 'no'. El operador | ofrece alternativas. Es sensible a mayúsculas/minúsculas y está anclada de principio (^) a fin ($).`
^<([a-z][a-z0-9]*)\b[^>]*>(.*?)<\/\1>$;<h1>Título</h1>;Busca una etiqueta HTML simple, capturando el nombre de la etiqueta (([a-z][a-z0-9]*) en el grupo 1) y su contenido ((.*?) en el grupo 2, de forma no codiciosa). Asegura que la etiqueta de cierre (<\/\1>) coincida con la de apertura usando una retroreferencia (\1). Anclada de principio (^) a fin ($).`
\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3};192.168.1.1;Busca un patrón de cuatro bloques de uno a tres dígitos (\d{1,3}) separados por puntos literales (\.). Esta regex solo valida la estructura, no los rangos numéricos válidos para una IP (0-255).`
"(.*?)";"Hola Mundo";"Extrae el texto contenido entre comillas dobles literales ("). El grupo (.*?) captura cualquier secuencia de caracteres (excepto nueva línea) de forma no codiciosa (?) entre las comillas.`
^[A-Z0-9]{10}$;AB12CD34EF;Valida un identificador que consiste exactamente en 10 caracteres ({10}), los cuales deben ser letras mayúsculas (A-Z) o dígitos (0-9) ([A-Z0-9]). Anclado de principio (^) a fin ($).`
filename\.([a-zA-Z0-9]+)$;filename.zip;Busca una cadena que comience literalmente con "filename." (filename\.) y capture (()) la extensión del archivo (uno o más caracteres alfanuméricos [a-zA-Z0-9]+) hasta el final de la línea ($).`
^\s*(\S+)\s+(\S+)\s*$;valor1 valor2;Captura dos "palabras" (secuencias de no-espacios, \S+) separadas por uno o más caracteres de espacio en blanco (\s+), permitiendo espacios opcionales (\s*) al inicio y al final de la línea. Anclado de principio (^) a fin ($).`
(g|gr)[ae]y;gray;Coincide con las variaciones de la palabra 'grey' o 'gray'. (g|gr) permite 'g' o 'gr', seguido de [ae] (que coincide con 'a' o 'e'), y finalmente la letra 'y'. No está anclado.`
^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$;00:1A:2B:3C:4D:5E;Valida una dirección MAC en formato hexadecimal: cinco grupos de dos dígitos hexadecimales ([0-9A-Fa-f]{2}) seguidos cada uno por un separador ([:-]), y un último grupo de dos dígitos hexadecimales. Anclado de principio (^) a fin ($).`
^\p{Lu};Árbol;Verifica si la cadena comienza (^) con una letra mayúscula Unicode (\p{Lu}). Solo evalúa el primer carácter de la cadena.`
